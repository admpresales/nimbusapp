#!/bin/bash

ENV_FILE="${HOME}/.nimbusapp/env"

function usage()
{
   echo "Usage: nimbusapp <IMAGE>:<VERSION> [OPTIONS] COMMAND"
   echo -e ""
   echo -e "Options:"
   echo -e "  IMAGE      The Docker App file you wish to run. If no repository is provided, admpresales is assumed."
   echo -e "             dockerapp is added if not explicitly stated."
   echo -e "  VERSION    The version of the Docker App file you wish to run."
   echo -e "  -s, --set  Enables you to set(override) default arguments"
   echo -e "  -v         Volume mounts .m2 and IdeaProject for access from the NimbusServer - EXPERIMENTAL NOT FOR CASUAL USERS"
   echo -e "  -p         Docker-compose project name to use - EXPERIMENTAL NOT RECOMMENDED FOR CASUAL USERS"
   echo -e ""
   echo -e "Commands:"
   echo -e "  down   Stop and remove containers"
   echo -e "  logs   Shows logs for containers"
   echo -e "  ps     Lists containers"
   echo -e "  rm     Remove stopped containers"
   echo -e "  start  Start existing containers"
   echo -e "  stop   Stop existing containers"
   echo -e "  up     Creates and start containers"
}

function product_exists(){
   #if we find an entry, return 0 for success, else 1 for failure
   echo
   if [[ $(grep ${REPOSITORY}/${IMAGE}.dockerapp ${ENV_FILE} | wc -l) -eq 1 ]]
   then
      return 0
   else
      return 1
   fi
}

# create folders to use for mount points
# currently not leverated by Intellij
function create_intellij_mount_points (){
   IDEA="IdeaProjects_docker"
   # if the folder doesn't exist, create it so it is owned by the user
   if [ ! -d "${HOME}/${IDEA}" ]
   then
      mkdir ${HOME}/${IDEA}
   fi

   if [ ! -d "${HOME}/.m2" ]
   then
      mkdir ${HOME}/.m2
   fi
}

REPOSITORY=admpresales
VERSION="latest"
PROJECT=""
ACTION=""
VOLUME_MOUNT=""

IMAGE=$1
shift
if [[ $IMAGE = *"help"* ]]; then
  usage
  exit 0
fi
if [[ "$IMAGE" == *\/* ]]; then
  REPOSITORY=$(echo $IMAGE | cut -d'/' -f1 )
  IMAGE=$(echo $IMAGE | cut -d'/' -f2 )
fi

if [[ "$IMAGE" == *:* ]]; then
  VERSION=$(echo $IMAGE | cut -d':' -f2 )
  IMAGE=$(echo $IMAGE | cut -d':' -f1 )
elif [[ -e $ENV_FILE && $(product_exists) -eq 0 ]]; then
  VERSION=$(grep ${REPOSITORY}/${IMAGE}.dockerapp ${ENV_FILE} | cut -d':' -f2 )
  echo "Using version in ${ENV_FILE}: ${VERSION}"
fi

# IMAGE="admpresales/${IMAGE}.dockerapp"

while [[ "$1" != "" ]]; do
  PARAM=$1
  VALUE=$2
  case $PARAM in
    -h | --help)
      usage
      exit 0
      ;;
      -s)
         ARGS="${ARGS} $1 $2"
         shift
         shift
         ;;
      -v)
         # check to see if intellij is being called.  since args can appear in differ order, checking all 3 places:
         # product, image or if it is a command not yet processed
         if [[ (`echo ${PRODUCT}|grep "intellij"| wc -l` -eq 1) || (`echo ${IMAGE}|grep "intellij"| wc -l` -eq 1) || (`echo "$@" |grep "intellij"| wc -l` -eq 1)]]
         then
            VOLUME_MOUNT="-e '\$a\    - ${HOME}/.m2:/home/demo/.m2' -e '\$a\    - ${HOME}/${IDEA}:/home/demo/IdeaProjects'"
            create_intellij_mount_points
         else
            echo "The '-v' option is only available with Intellij at this time.  Ignoring."
         fi
         shift
         ;;
      -p)
         PROJECT=$2
         shift
         shift
         ;;
      up)
        ACTION="up -d"
        shift
        break
        ;;
      down | start | stop | ps | rm | break)
        ACTION="${PARAM}"
        shift
        break
        ;;
      *)
       echo "Invalid agument passed: $1"
       usage
     exit 1
   esac
done

if [[ -z ${ACTION} ]]; then
   echo "You must specify a command"
   usage
   exit 1
fi

#create a project name for the docker-compose based on the image name.
if [[ -z ${PROJECT} ]]; then
   PROJECT=`echo ${IMAGE}|sed -r 's|\w+/||'|sed 's/:/_/'`
fi

#Build Command
COMMAND="docker-app render"
if [[ ! ${ARGS} == "" ]]; then
    COMMAND="${COMMAND} ${ARGS}"
fi

COMMAND="${COMMAND} ${REPOSITORY}/${IMAGE}:${VERSION}"

if [[ -z ${VOLUME_MOUNT} ]]; then
   COMMAND="${COMMAND} | docker-compose -p ${PROJECT} -f - ${ACTION} $@"
else
   # TODO: think of a better way to provide this capability
   COMMAND="${COMMAND} | sed -e "\$a\    - ${HOME}/.m2:/home/demo/.m2" -e "\$a\    - ${HOME}/${IDEA}:/home/demo/IdeaProjects" | docker-compose -p ${PROJECT} -f - ${ACTION} $@"
fi

echo -e "Using ${COMMAND}"
eval ${COMMAND}