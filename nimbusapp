#!/bin/bash

function usage()
{
    if [[ -n "$@" ]]; then
        error "$@" ""
    fi

    cat <<USAGE_EOF >&2
Usage: nimbusapp <IMAGE>[:<VERSION>] [OPTIONS] COMMAND [CMD OPTIONS]

Options:
  IMAGE       The Docker App file you wish to run. If no repository is provided, admpresales is assumed.
  VERSION     The version of the Docker App file you wish to run.
              Only required the first time a container is created, and will be cached for future use.
  -d, --debug Enable debugging output (use twice for verbose bash commands)
  -f, --force Skip all prompts - Use with caution, this option will happily delete your data without warning
  -s, --set   Enables you to set(override) default arguments
  --version   Print the version of nimbusapp and exit

Commands:
  down     Stop and remove containers
  help     Prints this help message
  inspect  Shows metadata and settings for a given application
  logs     Shows logs for containers
  ps       Lists containers
  pull     Pull service images
  render   Render the Compose file for the application
  rm       Remove stopped containers
  restart  Restart containers
  start    Start existing containers
  stop     Stop existing containers
  up       Creates and start containers
  version  Prints version information
  update   Update the version of nimbusapp to the latest version
  
Experimental/Advanced Options:  
  -v    Mounts volume for IdeaProject in IntelliJ container into user's home directory - EXPERIMENTAL: ONLY USE IF YOU UNDERSTAND VOLUME MOUNTS
  -m    Mounts volume for .m2 in IntelliJ container into user's home directory - EXPERIMENTAL: ONLY USE IF YOU UNDERSTAND VOLUME MOUNTS
  -p    Docker-compose project name to use, allows running multiple versions of the same image
  --preserve-volumes    Do not recreate anonymous volumes

Command Options:
  up    --no-start       Create containers without starting them
        --force-recreate Force all containers to be re-created
        --no-recreate    Do not allow any containers to be re-created
USAGE_EOF

    if [[ -n "$@" ]]; then
        exit 1
    else
        exit 0
    fi
}

function version_info() {
    output "nimbusapp version $NIMBUS_RELEASE_VERSION"
    output "Released on $NIMBUS_RELEASE_DATE"
}

function update_version() {
    version_info

    if prompt_yn "${C_BOLD}${C_RED}Do you want to update your nimbusapp version?${C_RESET}"; then
        output "Updating nimbusapp version..."

        if wget -nv -q "$NIMBUS_DOWNLOAD_URL" -O- | sudo tar -xzv -C "$NIMBUS_INSTALL_DIR" >/dev/null 2>&1; then
            "${NIMBUS_INSTALL_DIR}/nimbusapp" --version
        else
            error "Updating nimbusapp version - version unchanged"
        fi
    fi
}

function get_tags() {
  IMAGE="${IMAGE%.dockerapp}"
  NUM_RESULTS=""
  if [[ ${LATEST_FLAG} == true ]]; then
    NUM_RESULTS=0
  fi
  #This string will get all non-dev versions from docker hub, in last updated order.
  results="$(curl -s -o -w %{http_code} https://hub.docker.com/v2/repositories/admpresales/alm.dockerapp/tags?ordering=last_updated | jq -r ".results[${NUM_RESULTS}].name" | grep -v 'dev')"

  printf '%s\n' $results
}

# Ensure the apps.config file is initialized
#
# Also upgrades from v1 to v2 file format.
# v2 includes project name, tries to eliminate extra .dockerapps, and is a bit easier to parse
function apps_init() {
    # If v2 file exists, nothing to do
    if grep '^\s*#\s*v2\s*$' "$file" >/dev/null 2>&1; then
        return
    fi

    local template="# v2"
    local file="${1-$ENV_FILE}"
    local tmp="${file}.tmp$$"
    local backup="${file}.v1-backup"

    local proj img repo tag

    # Easy path, no file! Create it and return
    if [[ ! -f "$file" ]]; then
        echo $template > "$file"
        return
    fi

    mv "$file" "$tmp"
    echo $template > "$file"

    while read proj img; do
        proj="${proj%.dockerapp}"
        IFS=/: read repo img tag <<< "$img"

        echo $proj $repo $img $tag
    done < "$tmp" > "$file"

    mv "$tmp" "$backup"
}

function apps_load() {
    apps_init

    local search="${1-$PROJECt}"
    local file="${2-$ENV_FILE}"
    local entry proj repo img ver

    debug "Searching apps for: ${search}"

    entry="$(grep "^${search}\s" "${file}")"

    debug "Apps found: ${entry}"

    if [[ -n $entry ]]; then
        read proj repo img ver <<< "$entry"

        REPOSITORY="${REPOSITORY-$repo}"
        VERSION="${VERSION-$ver}"
        IMAGE="${IMAGE-$img}"
    fi
}

function apps_save() {
    apps_init

    local file="${1-$ENV_FILE}"

    debug "Saving: $PROJECT $REPOSITORY $IMAGE $VERSION"

    # Remove previous entry for this project
    sed -i "/^$PROJECT\s/d" "$file"

    # Write new entry
    echo $PROJECT $REPOSITORY $IMAGE $VERSION >> "$file"
}

# create folders to use for mount points
# currently not leverated by Intellij
function create_intellij_mount_points (){
    # if the folder doesn't exist, create it so it is owned by the user
    if [[ ! -d "${HOME}/${IDEA}" ]]
    then
        mkdir ${BASH_VERBOSE} ${HOME}/${IDEA}
    fi

    if [[ ! -d "${HOME}/.m2" ]]
    then
        mkdir ${BASH_VERBOSE} ${HOME}/.m2
    fi
}

function prompt_yn() {
    local PROMPT_TEXT=$"${1-Continue?} [y/n]"
    local USER_ANSWER

    echo -ne "${PROMPT_TEXT} " >&2

    while read USER_ANSWER; do
        case "${USER_ANSWER}" in
        [yY]*)
            return 0
            ;;
        [nN]*)
            return 1
            ;;
        esac

        echo -ne "${PROMPT_TEXT} " >&2
    done
}

# Colour codes
readonly C_REG="\e[39m"     # Regular colour
readonly C_BOLD="\e[1m"     # Bold font
readonly C_RED="\e[31m"     # Red colour
readonly C_RESET="\e[0m"    # Reset font and colour
readonly C_YELLOW="\e[33m"    # Yellow colour

prompt_delete() {
    output "" \
        "${C_BOLD}This action will ${C_BOLD}${C_RED}DELETE${C_REG} your containers and is ${C_BOLD}${C_RED}IRREVERSIBLE${C_RESET}!" \
        "" \
        "${C_BOLD}You may wish to use ${C_RESET}\`nimbusapp ${REPOSITORY}/${IMAGE}:${VERSION} stop'${C_BOLD} to shut down your containers without deleting them${C_RESET}" \
        "" \
        "${C_BOLD}The following containers will be deleted:${C_RESET}"

    docker-compose -p "${PROJECT}" -f "$COMPOSE_FILE" ps -q | while read id; do
        docker inspect --format "- {{.Name}}" "$id" >&2
    done

    output ""

    prompt_yn "${C_BOLD}${C_RED}Do you wish to DELETE these containers?${C_RESET}"
    return $?
}

prompt_recreate() {
    output  "" \
            "${C_BOLD}This action will cause one or more of your containers to be ${C_RED}DELETED${C_REG} and ${C_RED}RECREATED${C_REG}.${C_RESET}" \
            "" \
            "${C_BOLD}Recreating containers is normal when changing their configuration, such as image, tag and ports.${C_RESET}" \
            "" \
            "${C_BOLD}You may wish to use ${C_RESET}\`nimbusapp ${REPOSITORY}/${IMAGE}:${VERSION} start'${C_BOLD} to start your existing containers.${C_RESET}" \
            "" \
            "${C_BOLD}The following containers will be recreated:${C_RESET}"

    for c in "$@"; do
        output "- $c"
    done
    
    output ""

    prompt_yn "${C_BOLD}${C_RED}Recreate the listed containers?${C_RESET}"
    return $?
}

check_recreate() {
    local composeFile="$1"

    local containers=($(docker-compose -p "$PROJECT" -f "$COMPOSE_FILE" ps -q))
    local recreate=()

    local service hash composeHash name

    for id in "${containers[@]}"; do
        service="$(docker inspect "$id" --format '{{index .Config.Labels "com.docker.compose.service"}}')"
        hash="$(docker inspect "$id" --format '{{index .Config.Labels "com.docker.compose.config-hash"}}')"
        
        composeHash="$(docker-compose -p "$PROJECT" -f "$COMPOSE_FILE" config --hash="$service")"

        if [[ "$service $hash" != "$composeHash" ]]; then
            name="$(docker inspect "$id" --format {{.Name}})"
            recreate+=("$name")
        fi
    done

    if [[ ${#recreate[@]} -gt 0 ]]; then
        prompt_recreate "${recreate[@]}"
        return $?
    fi

    return 0
}


# -s var=val
# docker-app parses the "val" portion as a YAML value, which will cause it to infer a type
# unquoted numbers cause issues when they are rendered with the inferred type (5.00 becomes 5)
# we add quotes to the arguments in order to encourage docker-app to treat all values as strings
function append_dockerapp_arg() {
    local opt="$1"

    local var
    local val

    IFS== read var val <<< "$2"

    debug "$opt $var=$val"

    DOCKERAPP_ARGS="${DOCKERAPP_ARGS} ${opt} '${var}=\"${val}\"'"
    # DOCKERAPP_ARGS="${DOCKERAPP_ARGS} ${opt} ${var}=${val}"
}

function create_network() {
    if [[ -z "$(docker network ls -qf "name=${NETWORK_NAME}")" ]]; then
        docker network create --subnet "${NETWORK_SUBNET}" --gateway "${NETWORK_GATEWAY}" "${NETWORK_NAME}"
    fi
}

function _output() {
    for line in "$@"; do
        echo -e "$line" >&2
    done
}

function debug() {
    if (( NIMBUS_DEBUG > 0 )); then
        _output "$@"
    fi
    log "DEBUG" "$@"
}

function output() {
    if (( NIMBUS_OUTPUT > 0 )); then
        _output "$@"
    fi
    log "INFO" "$@"
}

function warn() {
    echo -ne "${C_BOLD}${C_YELLOW}WARNING:${C_RESET} " >&2
    _output "$@"
    log "WARN" "$@"
}

function error() {
    echo -ne "${C_BOLD}${C_RED}ERROR:${C_RESET} " >&2
    _output "$@"
    log "ERROR" "$@"
}

function fatal() {
    error "$@"
    exit 1
}

function log() {
    local level="$1"
    shift
    local timeStamp="$(date "+%Y-%m-%d %H:%M:%S")"

    mkdir -p "$(dirname $NIMBUS_LOG_FILE)"

    for line in "$@"; do
        if [[ -n "$line" ]]; then
            echo -e "[$timeStamp] $level - $line" >> "$NIMBUS_LOG_FILE"
        fi
    done
}

function log_prune() {
    local tmpFile="${NIMBUS_LOG_FILE}.tmp"

    tail -n $NIMBUS_LOG_LINES "$NIMBUS_LOG_FILE" > "$tmpFile"
    mv -f "$tmpFile" "$NIMBUS_LOG_FILE"
}


readonly NIMBUS_RELEASE_VERSION="UNRELEASED"
readonly NIMBUS_RELEASE_DATE="UNRELEASED"

BASH_VERBOSE=""

DEFAULT_REPOSITORY="admpresales"

PROJECT=""
VOLUME_MOUNT_IDEA=""
VOLUME_MOUNT_M2=""
IDEA="IdeaProjects_docker"

COMPOSE_COMMAND="${NIMBUS_COMPOSE_COMMAND-docker-compose}"
COMPOSE_ACTION=""
COMPOSE_ARGS="${NIMBUS_COMPOSE_ARGS}"

DOCKERAPP_COMMAND="${NIMBUS_DOCKERAPP_COMMAND-docker-app}"
DOCKERAPP_ACTION=""
DOCKERAPP_ARGS="${NIMBUS_DOCKERAPP_ARGS}"

NIMBUS_BASEDIR="${NIMBUS_BASEDIR-$HOME/.nimbusapp}"
NIMBUS_DOCKERHUB_URL="${NIMBUS_DOCKERHUB_URL-https://hub.docker.com}"
NIMBUS_DOCKERHUB_TIMEOUT="${NIMBUS_DOCKERHUB_TIMEOUT-10}"
NIMBUS_DEBUG="${NIMBUS_DEBUG-0}"
NIMBUS_OUTPUT="${NIMBUS_OUTPUT-1}"
NIMBUS_FORCE="${NIMBUS_FORCE-0}"

NIMBUS_DOWNLOAD_URL="${NIMBUS_DOWNLOAD_URL-https://github.com/admpresales/nimbusapp/releases/latest/download/nimbusapp.tar.gz}"
NIMBUS_INSTALL_DIR="${NIMBUS_INSTALL_DIR-/usr/local/bin}"

NETWORK_NAME="${NETWORK_NAME-demo-net}"
NETWORK_SUBNET="${NETWORK_SUBNET-172.50.0.0/16}"
NETWORK_GATEWAY="${NETWORK_GATEWAY-172.50.0.1}"

PRESERVE_VOLUMES=0

ENV_FILE="${NIMBUS_BASEDIR}/apps.config"

NIMBUS_LOG_FILE="${NIMBUS_LOG_FILE-${NIMBUS_BASEDIR}/nimbusapp.log}"
NIMBUS_LOG_LINES=10000

LATEST_FLAG=false

log "CMD" "$0 $*"

if [[ "$1" != "-"* ]]; then
    IMAGE="$1"

    shift
    if [[ "${IMAGE}" = *"help"* ]]; then
        usage
    fi

    if [[ "${IMAGE}" = *"version"* ]]; then
        version_info
        exit 0
    fi

    if [[ "${IMAGE}" = *"update"* ]]; then
        update_version
        exit 0
    fi
fi

while [[ "$1" != "" ]]; do
    PARAM="$1"
    VALUE="$2"

    case "$PARAM" in
    -h | --help | help)
        usage
        ;;
    --update)
        update_version
        exit 0
        ;;
    --version)
        version_info
        exit 0
        ;;
    -d|--debug)
        (( NIMBUS_DEBUG++ ))
        if (( NIMBUS_DEBUG >= 2 )); then
            BASH_VERBOSE="-v"
        fi
        shift
        ;;
    -s | --set)
        append_dockerapp_arg "$PARAM" "$VALUE"
        shift 2
        ;;
    --latest)
        LATEST_FLAG=true;
        shift
        ;;
    # TODO: Intellij checks should happen after image parsing
    -v)
         # check to see if intellij is being called.
        if [[ "${IMAGE}" == *intellij* ]]
        then
            # the \ \ forces spaces which are needed for the sed statment below for proper docker-compose format
            VOLUME_MOUNT_IDEA="\ \ \ \ - type: bind\n\ \ \ \ \ \ source: ${HOME}\/${IDEA}\n\ \ \ \ \ \ target: \/home\/demo/\/IdeaProjects"
            create_intellij_mount_points
        else
            warn "The '-v' option is only available with Intellij at this time.  Ignoring."
        fi
        shift
        ;;
    -m)
        # check to see if intellij is being called.
        if [[ "${IMAGE}" == *"intellij"* ]]
        then
            # the \ \ forces spaces which are needed for the sed statment below for proper docker-compose format
            VOLUME_MOUNT_M2="\ \ \ \ - type: bind\n\ \ \ \ \ \ source: ${HOME}\/\.m2\n\ \ \ \ \ \ target: \/home\/demo\/\.m2"
            create_intellij_mount_points
        else
            warn "The '-m' option is only available with Intellij at this time.  Ignoring."
        fi
        shift
        ;;
    -p)
        PROJECT="${VALUE}"
        shift
        shift
        ;;
    -f|--force)
        NIMBUS_FORCE=1
        shift
        ;;
    --preserve-volumes)
        PRESERVE_VOLUMES=1
        shift
        ;;
    render|inspect)
        DOCKERAPP_ACTION="${PARAM}"
        shift
        break
        ;;
    down | start | stop | ps | rm | logs | restart )
        COMPOSE_ACTION="${PARAM}"
        shift
        break
        ;;
    pull)
        DOCKERAPP_ACTION="render"
        COMPOSE_ACTION="pull"
        shift
        break
        ;;
    tags)
        get_tags
        exit 0
        ;;
    up)
        DOCKERAPP_ACTION="render"
        
        # Start in background if required
        if [[ "$@" == *"--no-start"* ]]; then
            COMPOSE_ACTION="up"
        else 
            COMPOSE_ACTION="up -d"
        fi

        shift
        break
        ;;
    *)
        usage "Invalid argument passed: $1"
    esac
done

if [[ "$IMAGE" == */* ]]; then
    IFS=/ read REPOSITORY IMAGE <<< "$IMAGE"
fi

if [[ "$IMAGE" == *:* ]]; then
    IFS=: read IMAGE VERSION <<< "$IMAGE"
fi

#create a project name for the docker-compose based on the image name.
if [[ -z $PROJECT ]]; then

    if [[ -z $IMAGE ]]; then
        usage "Please specify an image or project name."
    fi

    PROJECT="${IMAGE%.dockerapp}"
fi

if [[ -n $PROJECT ]]; then
    apps_load "${PROJECT}"
fi

if [[ -z $VERSION ]]; then
    fatal "No version number specified!" \
        "" \
        "If this is your first time using $IMAGE, please specify a version number:" \
            "\t$0 $IMAGE:<version_number> ${COMPOSE_ACTION:-$DOCKERAPP_ACTION}" \
        "" \
        "The version number you choose will be remembered for future commands."
fi

# Apply defaults if necessary
REPOSITORY="${REPOSITORY-$DEFAULT_REPOSITORY}"
IMAGE="${IMAGE%.dockerapp}"

if [[ -z $IMAGE ]]; then
    fatal "Could not determine image name. Please specify an image or project name."
fi

if [[ "$PROJECT" == "$IMAGE" ]]; then
    output "Using ${REPOSITORY}/${IMAGE}.dockerapp:${VERSION}" ""
else
    output "Using ${REPOSITORY}/${IMAGE}.dockerapp:${VERSION} (${PROJECT})" ""
fi

if [[ -z "${COMPOSE_ACTION}" && -z "${DOCKERAPP_ACTION}" ]]; then
    usage "You must specify a command"
fi

create_network

COMPOSE_ARGS="$@"
COMPOSE_DIR="${NIMBUS_BASEDIR}/cache/${PROJECT}/${REPOSITORY}/${IMAGE}/${VERSION}"
COMPOSE_FILE="${COMPOSE_DIR}/${IMAGE}.yml"
COMPOSE_BACKUP="${COMPOSE_FILE}.bk"

if [[ -n "${DOCKERAPP_ACTION}" ]]; then
    if curl -s --connect-timeout "${NIMBUS_DOCKERHUB_TIMEOUT}" "${NIMBUS_DOCKERHUB_URL}" > /dev/null 2>&1; then
        DOCKERAPP_COMMAND="${DOCKERAPP_COMMAND} ${DOCKERAPP_ACTION} ${DOCKERAPP_ARGS} ${REPOSITORY}/${IMAGE}:${VERSION}"

        if [[ "$DOCKERAPP_ACTION" == "render" ]]; then
            DOCKERAPP_COMMAND="${DOCKERAPP_COMMAND} > ${COMPOSE_FILE}"

            # Backup previous successful attempts in case this try fails
            # Ignore empty files (assume previous failure)
            if [[ -s "${COMPOSE_FILE}" ]]; then
                mv ${BASH_VERBOSE} "${COMPOSE_FILE}" "${COMPOSE_BACKUP}"
            else
                rm ${BASH_VERBOSE} -f "${COMPOSE_FILE}"
            fi
        fi # action == render

        mkdir ${BASH_VERBOSE} -p "${COMPOSE_DIR}"

        debug "Running: ${DOCKERAPP_COMMAND}"

        if ! eval "${DOCKERAPP_COMMAND}"; then
            # Something went wrong, replace the compose backup
            if [[ -f "${COMPOSE_BACKUP}" ]]; then
                mv -f ${BASH_VERBOSE} "${COMPOSE_BACKUP}" "${COMPOSE_FILE}"
            fi

            error "Could not render"

            if [[ "${VERSION}" == *"_"* ]]; then
                warn "Image name contains an underscore which is not used by nimbusapp." \
                    "Try using ${REPOSITORY}/${IMAGE}:${VERSION%%_*} instead"
            fi

            exit 1
        fi # eval

        if [[ -n "${VOLUME_MOUNT_IDEA}" ]]; then
            debug "Mounting IDEA: ${VOLUME_MOUNT_IDEA}"
            sed -i "/\svolumes:/a ${VOLUME_MOUNT_IDEA}" "${COMPOSE_FILE}"
        fi

        if [[ -n "${VOLUME_MOUNT_M2}" ]]; then
            debug "Mounting M2: ${VOLUME_MOUNT_M2}"
            sed -i "/\svolumes:/a ${VOLUME_MOUNT_M2}" "${COMPOSE_FILE}"
        fi


        if [[ "$DOCKERAPP_ACTION" == "render" && -z "${COMPOSE_ACTION}" ]]; then
            cat "${COMPOSE_FILE}"
        fi
    else # curl check
        if [[ ! -f "${COMPOSE_FILE}" ]]; then
            fatal "No connection to Docker Hub: ${NIMBUS_DOCKERHUB_URL} (${NIMBUS_DOCKERHUB_TIMEOUT}s)"
        else
            output "No connection to Docker Hub, using cached file!"
            debug "Docker Hub: ${NIMBUS_DOCKERHUB_URL} Timeout: ${NIMBUS_DOCKERHUB_TIMEOUT}"
            debug "Cached File: ${COMPOSE_FILE}"
        fi
    fi # curl check
fi

if [[ ! -f "$COMPOSE_FILE" ]]; then
    fatal "Could not find ${IMAGE}:${VERSION} (${PROJECT}) - do you need to create it with \`nimbusapp up'"
fi

if [[ "$COMPOSE_ACTION" == "down" && "$NIMBUS_FORCE" -eq 0 ]]; then
    if ! prompt_delete; then
        exit 1
    fi
fi

if [[ "$COMPOSE_ACTION" == "up"* && "$NIMBUS_FORCE" -eq 0 && "$COMPOSE_ARGS" != *"--force-recreate"* ]]; then
    if ! check_recreate; then
        exit 1
    fi
fi

if [[ -n "${COMPOSE_ACTION}" ]]; then
    if [[ $COMPOSE_ACTION == *"up"* && $PRESERVE_VOLUMES -eq 0 ]]; then
        COMPOSE_ARGS="$COMPOSE_ARGS -V"
    fi

    if [[ $COMPOSE_ACTION == *"down"* && $PRESERVE_VOLUMES -eq 0 ]]; then
        COMPOSE_ARGS="$COMPOSE_ARGS -v"
    fi

    COMPOSE_COMMAND="${COMPOSE_COMMAND} -p ${PROJECT} -f ${COMPOSE_FILE} ${COMPOSE_ACTION} ${COMPOSE_ARGS}"

    debug "Running: ${COMPOSE_COMMAND}"

    if ! eval "${COMPOSE_COMMAND}"; then
        rc=$?
        error "Failed to run compose: $rc"
        exit $rc
    fi
fi

apps_save
log_prune
