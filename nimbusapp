#!/bin/bash

ENV_FILE="${HOME}/.nimbusapp/apps.config"

function usage()
{
   echo "Usage: nimbusapp <IMAGE>:<VERSION> [OPTIONS] COMMAND"
   echo -e ""
   echo -e "Options:"
   echo -e "  IMAGE      The Docker App file you wish to run. If no repository is provided, admpresales is assumed."
   echo -e "             dockerapp is added if not explicitly stated."
   echo -e "  VERSION    The version of the Docker App file you wish to run."
   echo -e "  -s, --set  Enables you to set(override) default arguments"
   echo -e "  -v         Volume mounts IdeaProject for access from the NimbusServer - EXPERIMENTAL NOT FOR CASUAL USERS"
   echo -e "  -m         Volume mounts .m2 for access from the NimbusServer - EXPERIMENTAL NOT FOR CASUAL USERS"
   echo -e "  -p         Docker-compose project name to use - EXPERIMENTAL NOT RECOMMENDED FOR CASUAL USERS"
   echo -e ""
   echo -e "Commands:"
   echo -e "  down     Stop and remove containers"
   echo -e "  inspect  Shows metadata and settings for a given application"
   echo -e "  logs     Shows logs for containers"
   echo -e "  ps       Lists containers"
   echo -e "  render   Render the Compose file for the application"
   echo -e "  rm       Remove stopped containers"
   echo -e "  start    Start existing containers"
   echo -e "  stop     Stop existing containers"
   echo -e "  up       Creates and start containers"
}

function product_exists(){
   #if we find an entry, return 0 for success, else 1 for failure
   #forcing a short name standard since someone could pass intellij or intellij.dockerapp
   image=$(echo $IMAGE | cut -d'.' -f1 )
   if [[ $(grep "^${image}" ${ENV_FILE} | wc -l) -eq 1 ]]
   then
      return 0
   else
      return 1
   fi
}

# create folders to use for mount points
# currently not leverated by Intellij
function create_intellij_mount_points (){
   # if the folder doesn't exist, create it so it is owned by the user
   if [ ! -d "${HOME}/${IDEA}" ]
   then
      mkdir ${HOME}/${IDEA}
   fi

   if [ ! -d "${HOME}/.m2" ]
   then
      mkdir ${HOME}/.m2
   fi
}

REPOSITORY=admpresales
VERSION="latest"
PROJECT=""
ACTION=""
VOLUME_MOUNT_IDEA=""
VOLUME_MOUNT_M2=""
ISDOCKERAPPACTION=1
DOCKERAPP_ACTION="render"
IDEA="IdeaProjects_docker"

IMAGE=$1
shift
if [[ $IMAGE = *"help"* ]]; then
  usage
  exit 0
fi
if [[ "$IMAGE" == *\/* ]]; then
  REPOSITORY=$(echo $IMAGE | cut -d'/' -f1 )
  IMAGE=$(echo $IMAGE | cut -d'/' -f2 )
fi

if [[ "$IMAGE" == *:* ]]; then
  VERSION=$(echo $IMAGE | cut -d':' -f2 )
  IMAGE=$(echo $IMAGE | cut -d':' -f1 )
elif [[ -e $ENV_FILE ]]; then
  product_exists
  prodExists=$?
  if [[ $prodExists -eq 0 ]]; then
    #ensuring uniform comparision since someone could pass intillij or intellij.dockerapp
    IMAGE=$(echo $IMAGE | cut -d'.' -f1 )".dockerapp"
    VERSION=$(grep "^${IMAGE}" ${ENV_FILE} | cut -d':' -f2 )
    echo "Using ${IMAGE}:${VERSION} version found in ${ENV_FILE}"
  else
    echo "Not able to find ${IMAGE} in ${ENV_FILE}.  Will attempt to start using ${IMAGE}:${VERSION}"
  fi
fi

# IMAGE="admpresales/${IMAGE}.dockerapp"

while [[ "$1" != "" ]]; do
  PARAM=$1
  VALUE=$2
  case $PARAM in
    -h | --help)
      usage
      exit 0
      ;;
      -s)
         ARGS="${ARGS} $1 $2"
         shift
         shift
         ;;
      -v)
         # check to see if intellij is being called.
         if [[ $(echo ${IMAGE}|grep -w "intellij"| wc -l) -eq 1 ]]
         then
            # the \ \ forces spaces which are needed for the sed statment below for proper docker-compose format
            VOLUME_MOUNT_IDEA="\ \ \ \ - type: bind\n\ \ \ \ \ \ source: ${HOME}\/${IDEA}\n\ \ \ \ \ \ target: \/home\/demo/\/IdeaProjects"
            create_intellij_mount_points
         else
            echo "The '-v' option is only available with Intellij at this time.  Ignoring."
         fi
         shift
         ;;
      -m)
         # check to see if intellij is being called.
         if [[ $(echo ${IMAGE}|grep -w "intellij"| wc -l) -eq 1 ]]
         then
            # the \ \ forces spaces which are needed for the sed statment below for proper docker-compose format
            VOLUME_MOUNT_M2="\ \ \ \ - type: bind\n\ \ \ \ \ \ source: ${HOME}\/\.m2\n\ \ \ \ \ \ target: \/home\/demo\/\.m2"
            create_intellij_mount_points
            echo "Not implemented at this time."
         else
            echo "The '-m' option is only available with Intellij at this time.  Ignoring."
         fi
         shift
         ;;
      -p)
         PROJECT=$2
         shift
         shift
         ;;
      up)
        ACTION="up -d"
        shift
        break
        ;;
      down | start | stop | ps | rm | render | inspect | logs )
        ACTION="${PARAM}"
        shift
        break
        ;;
      *)
       echo "Invalid agument passed: $1"
       usage
     exit 1
   esac
done

if [[ -z ${ACTION} ]]; then
   echo "You must specify a command"
   usage
   exit 1
fi

#create a project name for the docker-compose based on the image name.
if [[ -z ${PROJECT} ]]; then
   PROJECT=`echo ${IMAGE}|sed -r 's|\w+/||'|sed 's/:/_/'`
fi

#Build Command
if [[ $ACTION == "inspect" ]]; then
    DOCKERAPP_ACTION="inspect"
    ISDOCKERAPPACTION=0
elif [[ $ACTION == "render" ]]; then
    ISDOCKERAPPACTION=0
fi

COMMAND="docker-app ${DOCKERAPP_ACTION}"

if [[ ! ${ARGS} == "" ]]; then
    COMMAND="${COMMAND} ${ARGS}"
fi

COMMAND="${COMMAND} ${REPOSITORY}/${IMAGE}:${VERSION}"
if [[ ${ISDOCKERAPPACTION} -eq 1 ]] ; then
    if [[ -z ${VOLUME_MOUNT_IDEA} ]]; then
        COMMAND="${COMMAND} | docker-compose -p ${PROJECT} -f - ${ACTION} $@"
    else
       # TODO: think of a better way to provide this capability
       #sed expression -e searches for volumes: and then appends on a new line the volume mount information
       COMMAND="${COMMAND}|sed -e \"/volumes:/a ${VOLUME_MOUNT_IDEA}\"| docker-compose -p ${PROJECT} -f - ${ACTION} $@"
    fi
fi

echo -e "Running ${COMMAND}"
eval ${COMMAND}
