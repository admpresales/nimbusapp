#!/bin/bash

function usage()
{
   output "Usage: nimbusapp <IMAGE>:<VERSION> [OPTIONS] COMMAND"
   output -e ""
   output -e "Options:"
   output -e "  IMAGE       The Docker App file you wish to run. If no repository is provided, admpresales is assumed."
   output -e "              dockerapp is added if not explicitly stated."
   output -e "  VERSION     The version of the Docker App file you wish to run."
   output -e "  -s, --set   Enables you to set(override) default arguments"
   output -e "  -v          Mounts volume for IdeaProject in IntelliJ container into user's home directory - EXPERIMENTAL: ONLY USE IF YOU UNDERSTAND VOLUME MOUNTS"
   output -e "  -m          Mounts volume for .m2 in IntelliJ container into user's home directory - EXPERIMENTAL: ONLY USE IF YOU UNDERSTAND VOLUME MOUNTS"
   output -e "  -p          Docker-compose project name to use - EXPERIMENTAL NOT RECOMMENDED FOR CASUAL USERS"
   output -e "  -d, --debug Enable debugging output (use twice for verbose bash commands)"
   output -e ""
   output -e "Commands:"
   output -e "  down     Stop and remove containers"
   output -e "  inspect  Shows metadata and settings for a given application"
   output -e "  logs     Shows logs for containers"
   output -e "  ps       Lists containers"
   output -e "  pull     Pull service images"
   output -e "  render   Render the Compose file for the application"
   output -e "  rm       Remove stopped containers"
   output -e "  restart  Restart containers"
   output -e "  start    Start existing containers"
   output -e "  stop     Stop existing containers"
   output -e "  up       Creates and start containers"
}

function product_exists(){
   #if we find an entry, return 0 for success, else 1 for failure
   #forcing a short name standard since someone could pass intellij or intellij.dockerapp
   image=$(echo $IMAGE | cut -d'.' -f1 )
   if [[ $(grep "^${image}" ${ENV_FILE} | wc -l) -eq 1 ]]
   then
      return 0
   else
      return 1
   fi
}

# create folders to use for mount points
# currently not leverated by Intellij
function create_intellij_mount_points (){
   # if the folder doesn't exist, create it so it is owned by the user
   if [[ ! -d "${HOME}/${IDEA}" ]]
   then
      mkdir ${BASH_VERBOSE} ${HOME}/${IDEA}
   fi

   if [[ ! -d "${HOME}/.m2" ]]
   then
      mkdir ${BASH_VERBOSE} ${HOME}/.m2
   fi
}

function prompt_yn() {
  local PROMPT_TEXT=$"${1-Continue?} [y/n]"
  local USER_ANSWER

  echo -n "${PROMPT_TEXT} "

  while read USER_ANSWER; do
    case "${USER_ANSWER}" in
      [yY]*)
        return 0
        ;;
      [nN]*)
        return 1
        ;;
    esac

    echo -n "${PROMPT_TEXT} "
  done
}

# -s var=val
# docker-app parses the "val" portion as a YAML value, which will cause it to infer a type
# unquoted numbers cause issues when they are rendered with the inferred type (5.00 becomes 5)
# we add quotes to the arguments in order to encourage docker-app to treat all values as strings
function append_dockerapp_arg() {
    local opt="$1"

    local var
    local val

    IFS== read var val <<< $2

    DOCKERAPP_ARGS="${DOCKERAPP_ARGS} ${opt} '${var}=\"${val}\"'"
}

function create_network() {
    if [[ -z "$(docker network ls -qf "name=${NETWORK_NAME}")" ]]; then
        docker network create --subnet "${NETWORK_SUBNET}" --gateway "${NETWORK_GATEWAY}" "${NETWORK_NAME}"
    fi
}

function debug() {
    if (( NIMBUS_DEBUG > 0 )); then
        echo "$@"
    fi
}

function output() {
    if (( NIMBUS_OUTPUT > 0 )); then
        echo "$@"
    fi
}

BASH_VERBOSE=""

REPOSITORY="admpresales"
VERSION="latest"
PROJECT=""
VOLUME_MOUNT_IDEA=""
VOLUME_MOUNT_M2=""
IDEA="IdeaProjects_docker"

COMPOSE_COMMAND="${NIMBUS_COMPOSE_COMMAND-docker-compose}"
COMPOSE_ACTION=""
COMPOSE_ARGS="${NIMBUS_COMPOSE_ARGS}"

DOCKERAPP_COMMAND="${NIMBUS_DOCKERAPP_COMMAND-docker-app}"
DOCKERAPP_ACTION=""
DOCKERAPP_ARGS="${NIMBUS_DOCKERAPP_ARGS}"

NIMBUS_BASEDIR="${NIMBUS_BASEDIR-$HOME/.nimbusapp}"
NIMBUS_DOCKERHUB_URL="${NIMBUS_DOCKERHUB_URL-https://hub.docker.com}"
NIMBUS_DOCKERHUB_TIMEOUT="${NIMBUS_DOCKERHUB_TIMEOUT-10}"
NIMBUS_DEBUG=0
NIMBUS_OUTPUT=1

NETWORK_NAME="${NETWORK_NAME-demo-net}"
NETWORK_SUBNET="${NETWORK_SUBNET-172.50.0.0/16}"
NETWORK_GATEWAY="${NETWORK_GATEWAY-172.50.0.1}"

ENV_FILE="${NIMBUS_BASEDIR}/apps.config"

IMAGE="$1"

shift
if [[ "${IMAGE}" = *"help"* ]]; then
  usage
  exit 0
fi

if [[ "$IMAGE" == *\/* ]]; then
  REPOSITORY=$(echo $IMAGE | cut -d'/' -f1 )
  IMAGE=$(echo $IMAGE | cut -d'/' -f2 )
fi

if [[ "$IMAGE" == *:* ]]; then
  VERSION=$(echo $IMAGE | cut -d':' -f2 )
  IMAGE=$(echo $IMAGE | cut -d':' -f1 )
elif [[ -e $ENV_FILE ]]; then
  product_exists
  prodExists=$?
  if [[ $prodExists -eq 0 ]]; then
    #ensuring uniform comparision since someone could pass intillij or intellij.dockerapp
    IMAGE=$(echo $IMAGE | cut -d'.' -f1 )".dockerapp"
    VERSION=$(grep "^${IMAGE}" ${ENV_FILE} | cut -d':' -f2 )
    output "Using ${IMAGE}:${VERSION} version found in ${ENV_FILE}"
  else
    output "Not able to find ${IMAGE} in ${ENV_FILE}.  Will attempt to start using ${IMAGE}:${VERSION}"
  fi
fi

# IMAGE="admpresales/${IMAGE}.dockerapp"

while [[ "$1" != "" ]]; do
  PARAM="$1"
  VALUE="$2"

  case "$PARAM" in
    -h | --help | help)
      usage
      exit 0
      ;;
      -d|--debug)
        (( NIMBUS_DEBUG++ ))
        if (( NIMBUS_DEBUG >= 2 )); then
            BASH_VERBOSE="-v"
        fi
        shift
      ;;
      -s | --set)
         append_dockerapp_arg "$PARAM" "$VALUE"
         shift 2
         ;;
      -v)
         # check to see if intellij is being called.
        if [[ "${IMAGE}" == *intellij* ]]
         then
            # the \ \ forces spaces which are needed for the sed statment below for proper docker-compose format
            VOLUME_MOUNT_IDEA="\ \ \ \ - type: bind\n\ \ \ \ \ \ source: ${HOME}\/${IDEA}\n\ \ \ \ \ \ target: \/home\/demo/\/IdeaProjects"
            create_intellij_mount_points
         else
            output "The '-v' option is only available with Intellij at this time.  Ignoring."
         fi
         shift
         ;;
      -m)
         # check to see if intellij is being called.
         if [[ "${IMAGE}" == *"intellij"* ]]
         then
            # the \ \ forces spaces which are needed for the sed statment below for proper docker-compose format
            VOLUME_MOUNT_M2="\ \ \ \ - type: bind\n\ \ \ \ \ \ source: ${HOME}\/\.m2\n\ \ \ \ \ \ target: \/home\/demo\/\.m2"
            create_intellij_mount_points
         else
            output "The '-m' option is only available with Intellij at this time.  Ignoring."
         fi
         shift
         ;;
      -p)
         PROJECT="${VALUE}"
         shift
         shift
         ;;
      render|inspect)
        DOCKERAPP_ACTION="${PARAM}"
        shift
        break
        ;;
      down | start | stop | ps | rm | logs | restart | pull )
        DOCKERAPP_ACTION="render"
        COMPOSE_ACTION="${PARAM}"
        shift
        break
        ;;
      up)
        DOCKERAPP_ACTION="render"
        COMPOSE_ACTION="up -d"
        shift
        break
        ;;
      *)
       output "Invalid argument passed: $1"
       usage
       exit 1
   esac
done

if [[ -z "${COMPOSE_ACTION}" && -z "${DOCKERAPP_ACTION}" ]]; then
   output "You must specify a command"
   usage
   exit 1
fi

create_network

#create a project name for the docker-compose based on the image name.
if [[ -z ${PROJECT} ]]; then
    PROJECT="$(basename $IMAGE .dockerapp)"
fi

COMPOSE_ARGS="$@"
COMPOSE_DIR="${HOME}/.nimbusapp/cache/${PROJECT}/${REPOSITORY}/${IMAGE}/${VERSION}"
COMPOSE_FILE="${COMPOSE_DIR}/${IMAGE}.yml"
COMPOSE_BACKUP="${COMPOSE_FILE}.bk"

if [[ -n "${DOCKERAPP_ACTION}" ]]; then
   if curl -s --connect-timeout "${NIMBUS_DOCKERHUB_TIMEOUT}" "${NIMBUS_DOCKERHUB_URL}" > /dev/null 2>&1; then
       DOCKERAPP_COMMAND="${DOCKERAPP_COMMAND} ${DOCKERAPP_ACTION} ${DOCKERAPP_ARGS} ${REPOSITORY}/${IMAGE}:${VERSION}"

       if [[ "$DOCKERAPP_ACTION" == "render" ]]; then
          DOCKERAPP_COMMAND="${DOCKERAPP_COMMAND} > ${COMPOSE_FILE}"

          # Backup previous successful attempts in case this try fails
          # Ignore empty files (assume previous failure)
          if [[ -s "${COMPOSE_FILE}" ]]; then
            mv ${BASH_VERBOSE} "${COMPOSE_FILE}" "${COMPOSE_BACKUP}"
          else
            rm ${BASH_VERBOSE} -f "${COMPOSE_FILE}"
          fi
       fi # action == render

       mkdir ${BASH_VERBOSE} -p "${COMPOSE_DIR}"

       debug "Running: ${DOCKERAPP_COMMAND}"

       if ! eval "${DOCKERAPP_COMMAND}"; then
          # Something went wrong, replace the compose backup
          if [[ -f "${COMPOSE_BACKUP}" ]]; then
            mv -f ${BASH_VERBOSE} "${COMPOSE_BACKUP}" "${COMPOSE_FILE}"
          fi

          output "ERROR: Could not render" >&2
          exit 1
       fi # eval

       if [[ -n "${VOLUME_MOUNT_IDEA}" ]]; then
         debug "Mounting IDEA: ${VOLUME_MOUNT_IDEA}"
         sed -i "/volumes:/a ${VOLUME_MOUNT_IDEA}" "${COMPOSE_FILE}"
       fi

       if [[ -n "${VOLUME_MOUNT_M2}" ]]; then
         debug "Mounting M2: ${VOLUME_MOUNT_M2}"
         sed -i "/volumes:/a ${VOLUME_MOUNT_M2}" "${COMPOSE_FILE}"
       fi


       if [[ "$DOCKERAPP_ACTION" == "render" && -z "${COMPOSE_ACTION}" ]]; then
          cat "${COMPOSE_FILE}"
       fi
   else # curl check
       if [[ ! -f "${COMPOSE_FILE}" ]]; then
          output "ERROR: No connection to Docker Hub: ${NIMBUS_DOCKERHUB_URL} (${NIMBUS_DOCKERHUB_TIMEOUT}s)" >&2
          exit 1
       else
          output "No connection to Docker Hub, using cached file!"
          debug "Docker Hub: ${NIMBUS_DOCKERHUB_URL} Timeout: ${NIMBUS_DOCKERHUB_TIMEOUT}"
          debug "Cached File: ${COMPOSE_FILE}"
       fi
   fi # curl check
fi

if [[ -n "${COMPOSE_ACTION}" ]]; then
  COMPOSE_COMMAND="${COMPOSE_COMMAND} -p ${PROJECT} -f ${COMPOSE_FILE} ${COMPOSE_ACTION} ${COMPOSE_ARGS}"
  debug "Running: ${COMPOSE_COMMAND}"
  eval "${COMPOSE_COMMAND}"
fi
