#!/bin/bash

ENV_FILE="${HOME}/.nimbusapp/env"

function usage()
{
   echo "Usage: nimbusapp [PRODUCT_NAME | <IMAGE>] [OPTIONS] COMMAND"
   echo -e ""
   echo -e "Options:"
   echo -e "  product_name - is software product name"
   echo -e "  -i         Use a specific image to run. Short name (assumes admpresales)"
   echo -e "             Example: pass ${PRODUCT}:x.x.x only out of admpresales/${PRODUCT}:x.x.x"
   echo -e "  -s, --set  Enables you to set(override) default arguments"
   echo -e "  -v         Volume mounts .m2 and IdeaProject for access from the NimbusServer - EXPERIMENTAL NOT FOR CASUAL USERS"
   echo -e "  -p         Docker-compose project name to use - EXPERIMENTAL NOT RECOMMENDED FOR CASUAL USERS"
   echo -e ""
   echo -e "Commands:"
   echo -e "  up     Creates containers, or starts containers if stopped (pulls down image if not present)"
   echo -e "  down   Stops AND TERMINATES (removes) the container(s)"
   echo -e "  start  Starts existing container(s)"
   echo -e "  stop   Stops existing container(s)"
   echo ""
}

function multiple_actions(){
   echo "You can only perform one action.  Current action is '${ACTION}' and you attempting to add '$1'"
   echo "Aborting"
   usage;
   exit 1;
}

function product_exists(){
   #if we find an entry, return 0 for success, else 1 for failure
   if [[ `grep "^$1.dockerapp " ${ENV_FILE}| wc -l` -eq 1 ]]
   then
      echo 0
   else
      echo 1
   fi
}

# create folders to use for mount points
# currently not leverated by Intellij
function create_intellij_mount_points (){
   IDEA="IdeaProjects_docker"
   # if the folder doesn't exist, create it so it is owned by the user
   if [ ! -d "${HOME}/${IDEA}" ]
   then
      mkdir ${HOME}/${IDEA}
   fi

   if [ ! -d "${HOME}/.m2" ]
   then
      mkdir ${HOME}/.m2
   fi
}

REPOSITORY=admpresales
VERSION="latest"
PRODUCT=""
PROJECT=""
ACTION=""
ACTION_COUNT=0
VOLUME_MOUNT=""

IMAGE=$1
shift
if [[ $IMAGE = *"help"* ]]; then
  usage
  exit 0
fi
if [[ "$IMAGE" == *\/* ]]; then
  echo "Slash found"
  REPOSITORY=$(echo $IMAGE | cut -d'/' -f1 )
  IMAGE=$(echo $IMAGE | cut -d'/' -f2 )
fi

echo $ENV_FILE
if [[ "$IMAGE" == *:* ]]; then
  VERSION=$(echo $IMAGE | cut -d':' -f2 )
  IMAGE=$(echo $IMAGE | cut -d':' -f1 )
elif [[ -e $ENV_FILE ]]; then
  IMAGE=$(grep ${IMAGE}.dockerapp ${ENV_FILE} | awk '{print $2}')
  VERSION=$(echo $IMAGE | cut -d':' -f2 )
  IMAGE=$(echo $IMAGE | cut -d':' -f1 )
fi

# IMAGE="admpresales/${IMAGE}.dockerapp"

while [[ "$1" != "" ]]; do
  PARAM=$1
  VALUE=$2
  case $PARAM in
    -h | --help)
      usage
      exit 0
      ;;
      -s)
         ARGS="${ARGS} $1 $2"
         shift
         shift
         ;;
      -v)
         # check to see if intellij is being called.  since args can appear in differ order, checking all 3 places:
         # product, image or if it is a command not yet processed
         if [[ (`echo ${PRODUCT}|grep "intellij"| wc -l` -eq 1) || (`echo ${IMAGE}|grep "intellij"| wc -l` -eq 1) || (`echo "$@" |grep "intellij"| wc -l` -eq 1)]]
         then
            VOLUME_MOUNT="-e '\$a\    - ${HOME}/.m2:/home/demo/.m2' -e '\$a\    - ${HOME}/${IDEA}:/home/demo/IdeaProjects'"
            create_intellij_mount_points
         else
            echo "The '-v' option is only available with Intellij at this time.  Ignoring."
         fi
         shift
         ;;
      -p)
         PROJECT=$2
         shift
         shift
         ;;
      up)
         #If ACTION has already been set
         if [[ ${ACTION_COUNT} -gt 0 ]]; then
            multiple_actions
         else
            ACTION_COUNT=1
            ACTION="up -d"
            shift
         fi
         ;;
      down)
         #If ACTION has already been set
         if [[ ${ACTION_COUNT} -gt 0 ]]; then
            multiple_actions
         else
            ACTION_COUNT=1
            ACTION="down"
            shift
         fi
         ;;
      start)
         #If ACTION has already been set
         if [[ ${ACTION_COUNT} -gt 0 ]]; then
            multiple_actions
         else
            ACTION_COUNT=1
            ACTION="start"
            shift
         fi
         ;;
      stop)
         #If ACTION has already been set
         if [[ ${ACTION_COUNT} -gt 0 ]]; then
            multiple_actions
         else
            ACTION_COUNT=1
            ACTION="stop"
            shift
         fi
         ;;
      *)
         echo "Invalid agument passed: $1"
         echo "Make sure your are NOT passing a product AND and image (-i) at the same time"
         echo "Aborting"
         usage
         exit 1
   esac
done

if [[ -z ${ACTION} ]]
then
   echo "You must specify an action up|down|start|stop"
   usage
   exit 1
fi

if [[ -z ${IMAGE} ]]
then
   if [ `grep "^${PRODUCT} " ${IMAGE_FILE}| wc -l` -eq 1 ]
   then
      IMAGE=`grep "^${PRODUCT} " ${IMAGE_FILE}|awk '{print $2}'`
   else
      echo "Your env file contains multiple entires for ${PRODUCT}"
      exit 1
   fi
fi

#create a project name for the docker-compose based on the image name.
if [[ -z ${PROJECT} ]]
then
   PROJECT=`echo ${IMAGE}|sed -r 's|\w+/||'|sed 's/:/_/'`
fi
echo -e "Starting ${PROJECT} using: ${IMAGE}"



if [[ -z ${VOLUME_MOUNT} ]]; then
   COMMAND="docker-app render ${ARGS} ${REPOSITORY}/${IMAGE}:${VERSION} | docker-compose -p ${PROJECT} -f - ${ACTION}"
else
   # To-Do
   # think of a better way to provide this capability
   COMMAND="docker-app render ${ARGS} ${REPOSITORY}/${IMAGE}:${VERSION} | sed -e "\$a\    - ${HOME}/.m2:/home/demo/.m2" -e "\$a\    - ${HOME}/${IDEA}:/home/demo/IdeaProjects" | docker-compose -p ${PROJECT} -f - ${ACTION}"
fi

echo -e "Using ${COMMAND}"
eval ${COMMAND}